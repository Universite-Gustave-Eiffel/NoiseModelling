plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'distribution'
    id 'java-library'
    id 'maven-publish'
}

sourceCompatibility = 11

def nm_version='5.0.2-SNAPSHOT'

distributions {
    main {
        distributionBaseName = 'NoiseModelling_without_gui'
        archivesBaseName = "NoiseModelling_without_gui"
        contents {
            from '../LICENSE'
            from '../README.md'
            from 'get_started_tutorial.sh'
            from 'src/main/groovy/org/noise_planet/'
            from 'src/main/groovy/get_started_tutorial.groovy'
            from('src/test/') { include 'resources/**' }
        }
    }
}

startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
    }
}


compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

group = "org.noise-planet"
archivesBaseName = "noisemodelling-wps"
version = nm_version


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = archivesBaseName
                description = 'Groovy scripts for NoiseModelling'
                url = 'https://github.com/Universite-Gustave-Eiffel/NoiseModelling'
                inceptionYear = '2025'

                licenses {
                    license {
                        name = 'GNU General Public License (GPLV3+)'
                        url = 'http://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        name = 'Nicolas Fortin'
                        organization = 'Gustave Eiffel University UMRAE'
                        url = 'https://github.com/nicolas-f'
                    }
                    developer {
                        name = 'Pierre Aumond'
                        organization = 'Gustave Eiffel University UMRAE'
                        url = 'https://github.com/pierromond'
                    }
                }
                scm {
                    connection='scm:git:https://github.com/Universite-Gustave-Eiffel/NoiseModelling.git'
                    developerConnection='scm:git:https://github.com/Universite-Gustave-Eiffel/NoiseModelling.git'
                    url='git@github.com:Universite-Gustave-Eiffel/NoiseModelling.git'
                    tag='HEAD'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://central.sonatype.com/repository/maven-snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('OSSRH_USERNAME') ?: project.findProperty('ossrhUsername')
                password = System.getenv('OSSRH_PASSWORD') ?: project.findProperty('ossrhPassword')
            }
        }
    }
}


repositories {
    mavenLocal() // To test noise modelling updated locally we have to put this first
    maven {
        name = 'Central Portal Snapshots'
        url = 'https://central.sonatype.com/repository/maven-snapshots/'
    }
    mavenCentral()
    maven { //for outdated geoserver wps plugin
        url "libs/"
    }
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    maven {
        url "https://download.osgeo.org/webdav/geotools/"
    }
    maven {
        url "https://maven.geo-solutions.it/"
    }
    maven {
        url "https://repo.matsim.org/repository/matsim/"
    }
}

test {
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "1g" // maximum heap size
    jvmArgs '-XX:MaxPermSize=1g' // mem argument for the test JVM
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
dependencies {
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation('org.geotools:gt-jdbc:21.1') {
        exclude group: 'javax.media'
    }
    implementation('org.geoserver.script:gs-script-groovy:2.15.1') {
        exclude group: 'org.geoscript'
        exclude group: 'no.ecc.vectortile'
        exclude group: 'javax.media'
        exclude group: 'commons-beanutils'
        exclude group: 'org.locationtech.jts'
        exclude group: 'org.geoserver', module: 'gs-wms'
        exclude group: 'org.geoserver', module: 'gs-wfs'
        exclude group: 'org.geoserver', module: 'gs-ows'
        exclude group: 'org.geoserver', module: 'gs-rest'
        exclude group: 'org.geoserver', module: 'gs-restconfig'
        exclude group: 'org.geoserver', module: 'gs-main'
        exclude group: 'org.geoserver', module: 'gs-wcs2_0'
        exclude group: 'org.geoserver', module: 'gs-wcs1_1'
        exclude group: 'org.geoserver', module: 'gs-wcs1_0'
        exclude group: 'org.geotools.xsd', module: 'gt-xsd-sld'
        exclude group: 'org.geotools.xsd', module: 'gt-xsd-wps'
        exclude group: 'org.geotools', module: 'gt-process-raster'
        exclude group: 'org.geotools', module: 'gt-process-feature'
    }
    implementation 'org.postgresql:postgresql:42.7.4'
    implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '[2.5, 2.6)'
    implementation group: 'org.ejml', name: 'all', version: '0.29'
    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore', version: '2.10.1'
    implementation group: 'org.orbisgis', name: 'h2gis', version: '[2.2, 3)'
    implementation('org.locationtech.jts:jts-core:1.20.0')
    implementation('org.locationtech.jts:jts-io:1.20.0')
    implementation group: 'org.noise-planet', name: 'noisemodelling-emission', version: '[5.0, 6)', changing: true
    implementation group: 'org.noise-planet', name: 'noisemodelling-propagation', version: '[5.0, 6)', changing: true
    implementation group: 'org.noise-planet', name: 'noisemodelling-pathfinder', version: '[5.0, 6)', changing: true
    implementation group: 'org.noise-planet', name: 'noisemodelling-jdbc',  version: '[5.0, 6.0)', changing: true
    implementation group: 'org.osgi', name: 'org.osgi.service.jdbc', version: '1.0.0'
    implementation group: 'org.openstreetmap.osmosis', name: 'osmosis-core', version: '[0.48, 0.49)'
    implementation group: 'org.openstreetmap.osmosis', name: 'osmosis-pbf', version: '[0.48, 0.49)'
    implementation group: 'org.openstreetmap.osmosis', name: 'osmosis-xml', version: '[0.48, 0.49)'
    implementation(group: 'org.matsim', name: 'matsim', version: '14.0') {
        exclude group: 'org.geotools'
    }

    implementation 'com.opencsv:opencsv:5.7.1'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '[2, 3)'
    testImplementation 'junit:junit:4.13.1'
}

// Function to extract the first GPG key's fingerprint
def getFirstGpgKeyFingerprint() {
    def stdout = new ByteArrayOutputStream()
    exec {
        def cmd = "gpg2"
        if(project.hasProperty('signing.gnupg.executable')) {
            cmd = project.signing.gnupg.executable
        }
        commandLine cmd, '--list-secret-keys', '--with-colons'
        standardOutput = stdout
        ignoreExitValue = false
    }
    def fprLine = stdout.toString().split('\n').find { it.startsWith('fpr:') }
    if (!fprLine) throw new GradleException('No GPG key found.')
    return fprLine.split(':')[9]
}

if (project.hasProperty("ossrhUsername")) {
    apply plugin: 'signing'

    signing {
        // You'll need to tell gradle what you want your GPG key ID to be so that the gpg-agent can do the right thing.
        //      On the command line this means including the following gradle property: -Psigning.gnupg.keyName=${MY_GPG_PUBLIC_KEY_ID} -P
        //      And if the machine this is running on has the gpg command but not the gpg2 command, then you'll need this gradle prop as well: -Psigning.gnupg.useLegacyGpg=true
        //      Full details here: https://docs.gradle.org/current/userguide/signing_plugin.html#sec:using_gpg_agent
        if ( ! project.hasProperty("signing.gnupg.keyName") ) {
            // Set the keyName property using the first defined in gpg program
            project.ext.'signing.gnupg.keyName' = getFirstGpgKeyFingerprint()
            logger.warn("Using the first GPG keyId " + project.ext.'signing.gnupg.keyName')
        }
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}

mainClassName = 'org.noise_planet.noisemodelling.runner.Main'

jar {
    manifest {
        attributes('Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'org.noise_planet.noisemodelling.runner.Main')
    }
}
